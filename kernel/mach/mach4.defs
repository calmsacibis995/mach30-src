/* 
 * Mach Operating System
 * Copyright (c) 1992 Carnegie Mellon University
 * All Rights Reserved.
 * 
 * Permission to use, copy, modify and distribute this software and its
 * documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 * 
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND FOR
 * ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 * 
 * Carnegie Mellon requests users of this software to return to
 * 
 *  Software Distribution Coordinator  or  Software.Distribution@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 * 
 * any improvements or extensions that they make and grant Carnegie Mellon 
 * the rights to redistribute these changes.
 */

/*
 *	Matchmaker definitions file for Mach4 kernel interface.
 */

/*
 * HISTORY
 * $Log:	mach4.defs,v $
 * Revision 2.3  93/08/03  12:31:33  mrt
 * 	Addded flavor argument to sampling interface.
 * 	[93/07/30  10:25:45  bershad]
 * 
 * Revision 2.2  93/01/24  13:20:41  danner
 * 	Recast Maeda's pc sampling code into new interface file.  Also
 * 	redefined how it works.
 * 	[93/01/11            rvb]
 * 
 */

subsystem
#if	KERNEL_SERVER
	  KernelServer
#endif	KERNEL_SERVER
#if	KERNEL_USER
	  KernelUser
#endif	KERNEL_USER
		       mach4 4000;

#include <mach/std_types.defs>
#include <mach/mach_types.defs>


type sampled_pc_t 	= struct[3]    of unsigned;
type sampled_pc_array_t = array[*:512] of sampled_pc_t;
type sampled_pc_seqno_t = unsigned;
type sampled_pc_flavor_t = unsigned;

routine task_enable_pc_sampling(
		host          : task_t;
		out tick      : int;     /* sample frequency in usecs	*/
		flavor	      : sampled_pc_flavor_t );

routine task_disable_pc_sampling(
		host          : task_t;
		out samplecnt : int);
				 
routine task_get_sampled_pcs(
		host	        : task_t;
		inout seqno     : sampled_pc_seqno_t;
		out sampled_pcs : sampled_pc_array_t);

routine thread_enable_pc_sampling(
		host          : thread_t;
		out tick      : int;     /* sample frequency in		usecs*/
		flavor	      : sampled_pc_flavor_t );		

routine thread_disable_pc_sampling(
		host          : thread_t;
		out samplecnt : int);
				 
routine thread_get_sampled_pcs(
		host	        : thread_t;
		inout seqno     : sampled_pc_seqno_t;
		out sampled_pcs : sampled_pc_array_t);


skip	/* pc_sampling reserved 1*/;
skip	/* pc_sampling reserved 2*/;
skip	/* pc_sampling reserved 3*/;
skip	/* pc_sampling reserved 4*/;
